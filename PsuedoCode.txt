BinaryInsertionSort(A[0...n-1])
//Algorith sorts a given Array using BinaryInsertionSort
//Input: An unsorted array A[0..n-1]
//Output: An array A[0...n-1] in ascending order
int v,j,loc=0;
    for i<--1 to n-1 do
        v= A[i]; 
        j=i-1; 
        loc = binarySearch(A[], v, 0, j);
        while j >= loc do
            A[j+1] = A[j];
            j--;
    	A[j+1]=A[j];

   

BinarySearch(A[], sel, low, high)
//Algorithm finds the location for a value to be inserted
//Input: An unsorted array A[0..n-1], sel the element to be inserted, int low
//is the lower bound of the array and int high which is the upper bound
//Output: An integer represents the location of the number to be inserted
        if (high <= low)
            if (sel > A[low])
                return (low + 1); 
            else 
                return low;
        int mid <--(low + high)/2;
        if sel = A[mid]
            return mid+1
        else if sel > a[mid]
            return binarySearch(a, sel, mid+1, high)
        else
            return binarySearch(a, sel, low, mid-1

Algorithm Efficeiny: 
    Binary Search: O(log(n))
    There are n objects in the array and binary search is execucted n times therefore the algorithm runs at O(nlog(n))
